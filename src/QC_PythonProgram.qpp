/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file QC_PythonProgram.qpp defines the %Qore PythonProgram class */
/*
    QC_PythonProgram.qpp

    Qore Programming Language

    Copyright 2020 Qore Technologies, s.r.o.

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include "QC_PythonProgram.h"

//! Program for embedding and executing Python code
/**
*/
qclass PythonProgram [arg=QorePythonProgram* pp; ns=Python; dom=EMBEDDED_LOGIC];

//! Creates the object and parses and runs the given source code
/** @param source_code the Python source to parse and compile
    @param source_label the label or file name of the source; this is used as the module name for the compiled Python
    code as well

    @note
    - The code is executed after parsing and compiling
    - Exceptions parsing, compiling, or running the Python code are thrown according to @ref python_exceptions
*/
PythonProgram::constructor(string source_code, string source_label) {
    ReferenceHolder<QorePythonProgram> pp(new QorePythonProgram(*source_code, *source_label, Py_file_input, xsink),
        xsink);
    if (*xsink) {
        return;
    }
    self->setPrivate(CID_PYTHONPROGRAM, pp.release());
}

//! Destroys the interpreter context and invalidates the object
/**
*/
PythonProgram::destructor() {
    //printd(5, "Qore PythonProgram::destructor() this: %p\n", pp);
    pp->destructor(xsink);
}

//! Runs the program
/**
    @note Exceptions parsing or compiling the Python code are thrown according to @ref python_exceptions
*/
auto PythonProgram::run() {
    return pp->run(xsink);
}

//! Call the given function and return the result
/** @param func_name the function name to call
    @param ... arguments to the function should follow the name converted to Python values as per @ref python_qore_to_python

    @return the return value of the Python function converted to Qore as per @ref python_python_to_qore

    @throw NO-FUNCTION the given function cannot be found in the Python program's module dictionary

    @see @ref python_exceptions
*/
auto PythonProgram::callFunction(string func_name, ...) {
    return pp->callFunction(xsink, func_name, args, 1);
}

//! Call the given function and return the result
/** @param func_name the function name to call
    @param argv arguments to the function as a list converted to Python values as per @ref python_qore_to_python

    @return the return value of the Python function converted to Qore as per @ref python_python_to_qore

    @throw NO-FUNCTION the given function cannot be found in the Python program's module dictionary

    @see @ref python_exceptions
*/
auto PythonProgram::callFunctionArgs(string func_name, *softlist<auto> argv) {
    return pp->callFunction(xsink, func_name, argv);
}

//! Call the given method and return the result
/** @param class_name the name of the class implementing the method to call
    @param method_name the method to call
    @param ... arguments to the method should follow the name converted to Python values as per @ref python_qore_to_python

    @return the return value of the Python method call converted to Qore as per @ref python_python_to_qore

    @throw NO-CLASS the given class cannot be found in the Python program's module dictionary
    @throw NO-METHOD the given method cannot be found in the class

    @see @ref python_exceptions
*/
auto PythonProgram::callMethod(string class_name, string method_name, ...) {
    return pp->callMethod(xsink, class_name, method_name, args, 2);
}

//! Call the given method and return the result
/** @param class_name the name of the class implementing the method to call
    @param method_name the method to call
    @param argv arguments to the method as a list converted to Python values as per @ref python_qore_to_python

    @return the return value of the Python method call converted to Qore as per @ref python_python_to_qore

    @throw NO-CLASS the given class cannot be found in the Python program's module dictionary
    @throw NO-METHOD the given method cannot be found in the class

    @see @ref python_exceptions
*/
auto PythonProgram::callMethodArgs(string class_name, string method_name, *softlist<auto> argv) {
    return pp->callMethod(xsink, class_name, method_name, argv);
}

//! Parse, compile, and evaluate the given statement and return any result
/** @param source_code the Python source to parse and compile
    @param source_label the label or file name of the source

    @throw PYTHON-COMPILE-ERROR error parsing or compiling the given source
 */
auto PythonProgram::evalStatement(string source_code, string source_label = "stmt") {
    return pp->eval(*source_code, *source_label, Py_single_input, xsink);
}

//! Parse, compile, and evaluate the given expression and return any result
/** @param source_code the Python source to parse and compile
    @param source_label the label or file name of the source

    @throw PYTHON-COMPILE-ERROR error parsing or compiling the given source

    @note This method uses a shared static PythonProgram object to parse, compile, and evaluate the input string
 */
auto PythonProgram::evalExpression(string source_code, string source_label = "exp") {
    return pp->eval(*source_code, *source_label, Py_eval_input, xsink);
}

//! Sets the "save object" callback for %Qore objects created from Python code
/** @par Example:
    @code{.py}
hash<string, object> object_cache;
code callback = sub (object obj) {
    # save object in object cache, so it doesn't go out of scope
    object_cache{obj.uniqueHash()} = obj;
}
pypgm.setSaveObjectCallback(callback);
    @endcode

    @param save_object_callback the callback to save any %Qore objects created in Python code, must take an argument
    of type @ref object_type "object"

    Due to the differences in garbage collection approaches between %Qore and Python, %Qore objects must be managed with
    a deterministic life cycle; JaPythona objects have only weak references to %Qore objects due to the lack of
    destructors in Python and the lack of determinism in the Python runtime for object lifecycle management.

    The callback set here will be called any time a %Qore object is created from Python code; if no callback is set,
    then the standard thread-local implementation is used where %Qore objects are saved in a thread-local hash.

    @see @ref python_qore_object_lifecycle_management for more information
*/
PythonProgram::setSaveObjectCallback(*code save_object_callback) [dom=PROCESS] {
    pp->setSaveObjectCallback(save_object_callback);
}

//! Parse, compile, and evaluate the given statement and return any result
/** @param source_code the Python source to parse and compile
    @param source_label the label or file name of the source

    @throw PYTHON-COMPILE-ERROR error parsing or compiling the given source

    @note This method uses the PythonProgram context in the current program to parse, compile, and evaluate the input string
 */
static auto PythonProgram::evalStatement(string source_code, string source_label = "stmt") {
    QorePythonProgram* pypgm = QorePythonProgram::getContext();
    assert(pypgm);
    return pypgm->eval(*source_code, *source_label, Py_single_input, xsink);
}

//! Parse, compile, and evaluate the given expression and return any result
/** @param source_code the Python source to parse and compile
    @param source_label the label or file name of the source

    @throw PYTHON-COMPILE-ERROR error parsing or compiling the given source

    @note This method uses a shared static PythonProgram object to parse, compile, and evaluate the input string
 */
static auto PythonProgram::evalExpression(string source_code, string source_label = "exp") {
    QorePythonProgram* pypgm = QorePythonProgram::getContext();
    assert(pypgm);
    return pypgm->eval(*source_code, *source_label, Py_eval_input, xsink);
}

//! Sets the "save object" callback for %Qore objects created from Python code in the root %Qore Program context
/** @par Example:
    @code{.py}
hash<string, object> object_cache;
code callback = sub (object obj) {
    # save object in object cache, so it doesn't go out of scope
    object_cache{obj.uniqueHash()} = obj;
}
PythonProgram::setSaveObjectCallback(callback);
    @endcode

    @param save_object_callback the callback to save any %Qore objects created in Python code, must take an argument
    of type @ref object_type "object"

    Due to the differences in garbage collection approaches between %Qore and Python, %Qore objects must be managed with
    a deterministic life cycle; JaPythona objects have only weak references to %Qore objects due to the lack of
    destructors in Python and the lack of determinism in the Python runtime for object lifecycle management.

    The callback set here will be called any time a %Qore object is created from Python code; if no callback is set,
    then the standard thread-local implementation is used where %Qore objects are saved in a thread-local hash.

    @see @ref python_qore_object_lifecycle_management for more information
*/
static PythonProgram::setSaveObjectCallback(*code save_object_callback) [dom=PROCESS] {
    QorePythonProgram* pypgm = QorePythonProgram::getContext();
    assert(pypgm);
    pypgm->setSaveObjectCallback(save_object_callback);
}

