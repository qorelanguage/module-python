/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file QC_PythonProgram.qpp defines the %Qore PythonProgram class */
/*
    QC_PythonProgram.qpp

    Qore Programming Language

    Copyright 2020 Qore Technologies, s.r.o.

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include "QC_PythonProgram.h"

//! Program for embedding and executing Python code
/**
 */
qclass PythonProgram [arg=QorePythonProgram* pp; ns=Qore::Python; dom=EMBEDDED_LOGIC];

//! Creates the object and parses the given source code
/** @param source_code the Python source to parse and compile
    @param source_label the label or file name of the source

    @throw PYTHON-COMPILE-ERROR error parsing or compiling the given source
 */
PythonProgram::constructor(string source_code, string source_label) {
    ReferenceHolder<QorePythonProgram> pp(new QorePythonProgram(*source_code, *source_label, Py_file_input, xsink),
        xsink);
    if (*xsink) {
        return;
    }
    self->setPrivate(CID_PYTHONPROGRAM, pp.release());
}

//! run
/**
 */
auto PythonProgram::run() {
    return pp->run(xsink);
}

//! Call runction and return the result
/**
 */
auto PythonProgram::callFunction(string name, ...) {
    return pp->callFunction(xsink, name, args, 1);
}

//! Call runction and return the result
/**
 */
auto PythonProgram::callFunctionArgs(string name, *softlist<auto> argv) {
    return pp->callFunction(xsink, name, argv);
}

//! Parse, compilem and evaluate the given statement and return any result
/** @param source_code the Python source to parse and compile
    @param source_label the label or file name of the source

    @throw PYTHON-COMPILE-ERROR error parsing or compiling the given source
 */
static auto PythonProgram::evalStatement(string source_code, string source_label) {
    ReferenceHolder<QorePythonProgram> pp(new QorePythonProgram(*source_code, *source_label, Py_single_input, xsink),
        xsink);
    if (*xsink) {
        return QoreValue();
    }
    return pp->run(xsink);
}

//! Parse, compilem and evaluate the given expression and return any result
/** @param source_code the Python source to parse and compile
    @param source_label the label or file name of the source

    @throw PYTHON-COMPILE-ERROR error parsing or compiling the given source
 */
static auto PythonProgram::evalExpression(string source_code, string source_label) {
    ReferenceHolder<QorePythonProgram> pp(new QorePythonProgram(*source_code, *source_label, Py_eval_input, xsink),
        xsink);
    if (*xsink) {
        return QoreValue();
    }
    return pp->run(xsink);
}
