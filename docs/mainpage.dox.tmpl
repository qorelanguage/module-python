/** @mainpage Qore python Module

    @tableofcontents

    @section pythonintro python Module Introduction

    The \c python module allows for transparent and dynamic bidirectional importined code from %Qore to %Python and
    vice-versa.  Qore classes can inherit %Python classes and extend them, and %Python classes can inherit %Qore classes
    and extend them as well; even %Qore abstract classes can be inherited by %Python classes and made concrete by
    implementing the requried concrete methods in %Python.

    This module also implements support in the same shared object for the \c qoreloader module for %Python so allow
    native %Python code to import %Qore APIs; see @ref python_qoreloader_module for more information.

    This module is released under the MIT license (see \c COPYING.MIT in the source distribution for more
    information).  The module is tagged as such in the module's header (meaning it can be loaded unconditionally
    regardless of how the %Qore library was initialized).

    To use the module in a %Qore script, use the \c %%requires directive as follows:
    @code %requires python @endcode

    Helper %Qore classes provided by this module:
    |!Class|!Description
    |@ref Python::PythonProgram "PythonProgram"|Allows %Python code to be embedded and executed in %Qore

    @section python_examples Examples

    @par Example:
    @code{.py}
#!/usr/bin/env qore

%new-style
%require-types
%strict-args
%enable-all-warnings

%requires python

PythonProgram::evalExpression("print('hello world!')");
    @endcode

    @par Import Example:
    @code{.py}
#!/usr/bin/env qore

%new-style
%require-types
%strict-args
%enable-all-warnings

# import the math module into the Qore "Python::math" namespace
%module-cmd(python) import math
# import the JSONEncoder class into the "Python::json" namespace
%module-cmd(python) import json.JSONEncoder

%exec-class Main

public class Main {
    constructor() {
        JSONEncoder enc();
        printf("%s\n", enc.encode(math::sin(1)));
    }
}
    @endcode

    @section python_import Importing Python APIs into Qore

    To import %Python APIs and definitions into a %Qore program, the following python-module-specific module
    command can be used, which also causes the python module to be loaded and initialized if necessary:
    - @code{.qore} %module-cmd(python) import module[.symbol|*] @endcode imports the given %Python module into %Python
      and then imports the module or optionally only the given symbol into the %Qore program from %Python.

    @par Example:
    @code{.qore}
%module-cmd(python) import math.sin

auto sub get(auto arg) {
    return math::sin(arg);
}
    @endcode

    @par Example:
    @code{.qore}
Program p(PO_NEW_STYLE);
p.loadModule("python");
p.issueModuleCmd("python", "import math");
    @endcode

    @subsection python_module_path Set the Python Module Path

    Elements can be added to the %Python import module path by using the following module command:
    - @code{.qore} %module-cmd(python) add-module-path <path>@endcode

    The path given is also subjected to environment variable substitutions; the environment variable name must be
    prefixed with a \c "$" char and then can be given either surrounded by \c "()" or \c "{}" brackets, of if no
    brackets are used, the environment variable must fit the following pattern: [a-zA-Z0-9_] (alphanumeric + \c "_").

    @par Example:
    @code{.qore}
%module-cmd(python) add-module-path ${MY_PYTHON_MODS}
%module-cmd(python) import my-python-mod
    @endcode

    @par Example:
    @code{.qore}
Program p(PO_NEW_STYLE);
p.loadModule("python");
p.issueModuleCmd("python", "add-module-path " + get_script_dir());
p.issueModuleCmd("python", "import my-python-module");
    @endcode

    @subsection python_immediate_parsing Parsing Python Code Immediately

    %Python code can be parsed immediately using the following module command:
    - @code{.qore} %module-cmd(python) parse <filename> <Python source>@endcode

    @par Example:
    @code{.qore}
Program p(PO_NEW_STYLE);
string src = "
class PyTest:
    def get(self):
        return 3
";
p.issueModuleCmd("python", "parse pytest.py " + src);
    @endcode

    @subsection python_class_export Exporting Python Classes to Qore

    %Python classes can be explicitly exported to %Qore with the following module command:
    - @code{.qore} %module-cmd(python) export-class <class-name>@endcode

    @par Example:
    @code{.qore}
Program p(PO_NEW_STYLE);
p.issueModuleCmd("python", "export-class PyTest");
Class cls = Class::forName(p, "PyTest");
object obj = cls.newObject();
printf("get(): %y\n", obj.get());
    @endcode

    @subsection python_func_export Exporting Python Functions to Qore

    %Python functions can be explicitly exported to %Qore with the following module command:
    - @code{.qore} %module-cmd(python) export-func <func-name>@endcode

    @par Example:
    @code{.qore}
Program p(PO_NEW_STYLE);
p.issueModuleCmd("python", "export-func PyTest");
Function f = Function::forName(p, "py_test");
printf("py_test(): %y\n", obj.call());
    @endcode

    @section python_qore_import Importing Qore APIs into Python

    %Qore APIs and definitions can be imported into a %Python program by using the following module command:
    - @code{.qore} %module-cmd(python) import-ns <qore-namespace> <python-module-path>@endcode

    @par Example:
    @code{.qore}
Program p(PO_NEW_STYLE);
p.issueModuleCmd("python", "import-ns MyQoreNamespace MyPythonModule");
    @endcode

    @subsection python_inheriting_qore_classes Inheriting Qore Classes in Python

    When %Python code inherits %Qore classes, the %Qore constructor must be explicitly called in the %Python
    \c __init__() method as in the following example.

    @par Example:
    @code{.py}
import qore.xml

class PyXmlRpcClient(qore.xml.XmlRpcClient):
    def __init__(self, opts, do_not_connect):
        super(PyXmlRpcClient, self).__init__(opts, do_not_connect)
    @endcode

    @subsection python_aliases Creating Python Aliases

    The following module command can be used to create an alias in %Python code:
    - @code{.qore} %module-cmd(python) alias <python-source-path> <python-target-path>@endcode

    This is often used when importing %Qore namespaces to %Python to create an alias directly from a child %Qore
    namespace to a %Python module or package that is more convenient to access in %Python code.

    @par Example:
    @code{.qore}
Program p(PO_NEW_STYLE);
p.issueModuleCmd("python", "import-ns MyQoreNamespace MyPythonModule");
p.issueModuleCmd("python", "alias MyPythonModule.MySubModule1.MySubModule2.MyApi MyApi");
    @endcode

    @section python_threads_and_stack Python Threading and Stack Management

    This module implements support for multiple %Python interpreters along with multithreading by managing the %Python
    interpreter thread state manually.

    Additionally, the %Python recursion limit is also set automatically depending on the current thread stack size set
    in %Qore.

    This is done to avoid crashes due to stack exhaustion in combination %Qore and %Python code.

    To avoid \c RecursionError exceptions when mixing %Qore and %Python in multithreaded code, make sure the thread
    stack size is set to an appropriate size in %Qore (using \c set_default_thread_stack_size() before the %Python
    interpreter is created, for example); the %Python recursion limits are then calculated and managed dynamically
    according to the thread stack size and thread stack usage at the time of context switches to %Python.

    @section python_qoreloader_module qoreloader Module

    The %Qore python module can also be aliased or symlinked to \c "qoreloader.so" (\c "qoreloader.pyd" on Windows)
    and placed in the %Python module path (\c PYTHONPATH), as the %Qore binary module also implement code for the
    \c qoreloader %Python module in the same shared object, which allows %Python programs to dynamically initialize the
    %Qore library from %Python programs and then import %Qore APIs into %Python using an injected \c qore package.

    The \c qoreloader module implements the following functionality:
    - @ref python_qoreloader_import_qore "qore": a special loader package for dynamically importing %Qore APIs into
      %Python
    - @ref python_qoreloader_import_java "java": a special loader package for dynamically import Java APIs into
      %Python
    - @ref qoreloader_load_java : a %Python function for loading Java APIs into %Qore so they can be imported then
      into %Python
    - @ref qoreloader_issue_module_cmd : a %Python function for issuing %Qore module commands, which can be used
      (among other things) for setting the Java CLASSPATH, for example

    @subsection python_qoreloader_import_qore Using the qoreloader Module to Import Qore APIs

    For example, for %Python to import the %Qore \c SqlUtil module, the following code can be used.

    @par Example
    @code{.py}
import qoreloader
from qore.SqlUtil import Table

t = Table("pgsql:user/pass@db", "table_name")
print(t.getTable().selectRow({"where": {"col1": "value"}}))
    @endcode

    When %Qore modules are imported, the lowest namespace created by the module is imported as the new %Python module
    under the %Python \c qore package.

    See the next section about importing the special \c <tt><b>qore.__root__</b></tt> module.

    @note Unlike <tt><b>qore.__root__</b></tt>, using any other submodule name other than <tt><b>__root__</b></tt>
    after <tt><b>qore</b></tt> will cause a %Qore module to be loaded.  If the %Qore module cannot be found, an
    appropriate exception is thrown.

    @subsection python_qore_root_imports qore.__root__ Module

    The special \c qore package has a special module called \c __root__ which represents the root namespace of the
    %Qore program object.

    Importing <tt><b>qore.__root__</b></tt> module causes all symbols to be imported into the %Python program.

    Because %Qore namespaces are imported as %Python modules, any existing %Qore namespace can be imported into a
    %Python program using the <tt><b>qore.__root__</b></tt> module as in the following examples:

    @code{.py}
# import the ::Qore::Thread namespace
import qore.__root__.Qore.Thread

# import specific classes from the Qore library
from qore.__root__.Qore.SQL import DatasourcePool, Datasource, SQLStatement
    @endcode

    @note Importing modules using <tt><b>qore.__root__</b></tt> does not cause any external %Qore modules to be
    loaded; it just imports existing %Qore namespaces into the %Python program.  To load a %Qore module explicitly,
    use a %Qore module name after <tt><b>qore</b></tt>.

    @subsection python_qoreloader_import_java Using the qoreloader Module to Import Java APIs Directly

    The \c python module implements support for using %Qore's \c jni module to import Java code dynamically into %Qore
    and then into %Python using the \c java package.

    To import Java classes into %Python, import the java class by prefixing \c "java." to the package path name.

    For example, to import the Java \c java.util.HashMap class into %Python, the following code can be used.

    @par Example
    @code{.py}
# load the qoreloader API
import qoreloader
# import the Java class into Python
from java.java.util import HashMap

m = new HashMap()
m.put("a", "value")
    @endcode

    You can also set the classpath for Java imports as in the following example:

    @par Example
    @code{.py}
# load the qoreloader API
import qoreloader

# set up the classpath so that the jni module can find the JAR file
qoreloader.issue_module_cmd('jni', 'add-classpath $HOME/jar/qore-jni.jar')

# import the Java class into Python
from java.org.qore.lang.restclient import RestClient

r = RestClient({"url": "https://localhost:8011"})
    @endcode

    When Java packages and classes are imported, the lowest package created by the module is imported as the new
    %Python module under the %Python \c java package.

    The given APIs are first dynamically imported into %Qore, and then the %Qore APIs are imported dynamically into
    %Python.

    This is the easiest way to import Java APIs into %Python.

    @subsubsection python_java_wildcard_imports Importing Java Packages into Python Through Qore

    Wildcard imports from Java are not currently directly supported, however you can import the Java package as a
    %Python module and then the classes in the module will be dynamically created when they are referenced.  See the
    following example:

    @par Java Package Import Example
    @code{.py}
# load the qoreloader API
import qoreloader

# set up the classpath so that the jni module can find the JAR file
qoreloader.issue_module_cmd('jni', 'add-classpath $HOME/jar/qore-jni.jar')

# import the Java package into Python
from java.org.qore.lang import restclient

# the RestClient class is resolved and imported dynamically on reference
r = restclient.RestClient({"url": "https://localhost:8011"})
    @endcode

    @note Direct wildcard imports in the format <tt>from java.some.package.path import *</tt> are not yet supported,
    as once the %Python module is created, the dynamic attribute lookups in the the global dictionary are not executed
    at runtime using the wildcard import information, therefore all Java classes to be imported should be either
    explicitly listed in the \c import statement, or the entire package should be imported as above; a \c "*" wildcard
    import will only work if the required Java classes have already been imported into the %Qore program container in
    advance otherwise.

    @subsection python_java_import Importing Java APIs Indirectly into Python Through Qore

    The \c python module implements support for using %Qore's \c jni module to import Java code dynamically into %Qore
    and then into %Python using a two-step process.

    To import Java code first into %Qore, use @ref qoreloader_load_java with the Java dot path to the class name to
    load, and then import the %Qore class into %Python using the @ref python_qore_root_imports "qore.__root__" module
    as in the following example:

    @par Example
    @code{.py}
# load the qoreloader API
import qoreloader

# set up the classpath so that the jni module can find the JAR file
qoreloader.issue_module_cmd('jni', 'add-classpath $HOME/jar/qore-jni.jar')

# dynamically import the Java code into Qore
qoreloader.load_java("org.qore.lang.restclient.RestClient")

# import the Qore code into Python where it can be used
from qore.__root__.Jni.org.qore.lang.restclient import RestClient
    @endcode

    @subsection python_java_import_classpath Setting the Java Classpath

    To set the Java classpath, call the @ref qoreloader_issue_module_cmd function with the first argument set to
    \c "jni" and the second set to \c "add-classpath <classpath>" or \c "add-relative-classpath <classpath>" as
    needed.

    @par Example
    @code{.py}
# load the qoreloader API
import qoreloader

# set up the classpath so that the jni module can find the JAR file
qoreloader.issue_module_cmd('jni', 'add-classpath $HOME/jar/qore-jni.jar')

# dynamically import the Java code into Qore
qoreloader.load_java("org.qore.lang.restclient.RestClient")

# import the Qore code into Python where it can be used
from qore.__root__.Jni.org.qore.lang.restclient import RestClient
    @endcode

    @subsection qoreloader_issue_module_cmd qoreloader.issue_module_cmd()

    @code{.py}
qoreloader.issue_module_cmd(module, cmd)
    @endcode

    @par Arguments
    - \c module: the name of the %Qore module where the command will be issued
    - \c cmd: the full command to be issued

    @subsection qoreloader_load_java qoreloader.load_java()

    @code{.py}
qoreloader.load_java(path)
    @endcode

    @par Arguments
    - \c path: the dot path to the Java class to be loaded into %Qore, after which it can be imported into %Python
      under %Python module \c "qore.__root__.Jni"; for example, <tt>path = 'javax.jms.Message'</tt> would be then
      imported into %Python with \c "from qore.__root__.Jni.javax.jms import Message".

    @par Example
    @code{.py}
# load the qoreloader API
import qoreloader

# set up the classpath so that the jni module can find the JAR file
qoreloader.issue_module_cmd('jni', 'add-classpath $HOME/jar/qore-jni.jar')

# dynamically import the Java code into Qore
qoreloader.load_java("org.qore.lang.restclient.RestClient")

# import the Qore code into Python where it can be used
from qore.__root__.Jni.org.qore.lang.restclient import RestClient
    @endcode

    @note Once the Java code has been imported into %Qore, it must then be imported into %Python; the %Python parent
    module for such Java code is \c "qore.__root__.Jni"

    @section python_types Type Conversions Between Qore and Python

    @subsection python_qore_to_python Type Conversions From Qore To Python

    |!Source %Qore Type|!Target Python Type
    |\c binary|\c bytearray
    |\c bool|\c bool
    |\c date|\c datetime.datetime (absolute date/time values) or \c datetime.delta (relative date/time values)
    |\c float|\c float
    |\c hash|\c dict
    |\c int|\c int
    |\c list|\c list
    |\c list|\c string
    |\c code (closure or call reference)|\c callable

    @subsection python_python_to_qore Type Conversions From Python to Qore

    |!Source Python Type|!Target %Qore Type
    |\c bool|\c bool
    |\c int|\c int or \c number if greater than 64-bits
    |\c float|\c float
    |\c bytes|\c binary
    |\c bytearray|\c binary
    |\c datetime.datetime|\c date (absolute date/time values)
    |\c datetime.delta|\c date (relative date/time values)
    |\c dict|\c hash
    |\c list|\c list
    |\c string|\c list
    |\c tuple|\c list
    |\c function, \c method|\c code

    All other %Python types are converted to a %Qore object using a dynamically-created class that wraps the %Python
    type or class.

    @section python_exceptions Python Exception Handling

    %Python exceptions are mapped to Qore exceptions as follows:
    - \c err: the fully-qualified %Python exception class name (ex: \c "builtins.SyntaxError", \c "socket.timeout")
    - \c desc: the string description, if none, then the exception arguments converted to a string with \c repr()
    - \c arg: the %Python exception object itself converted to a Qore value

    @section python_qore_object_lifecycle_management Managing the Lifecycle of Qore objects from Python

    %Qore's deterministic garbage collection approach and reliance on destructors means that %Qore objects created by
    %Python must have their lifecycles managed externally.

    %Python objects wrapping %Qore objects hold only weak references to %Qore objects.

    @subsection python_qore_object_lifecycle_default Default Qore Object Lifecycle Management

    By default, %Qore objects are saved in thread-local data, so the lifecycle of the object is automatically limited
    to the existence of the thread.

    The thread-local hash key name used to save the list of objects created is determined by the value of the
    \c "_python_save" thread-local key, if set.  If no such key is set, then \c "_python_save" is used instead as the
    literal key for saving the list of objects.

    @subsection python_qore_object_lifecycle_explicit Explicit Qore Object Lifecycle Management

    The lifecycle of %Qore objects can be managed explicitly by using the
    @ref Python::PythonProgram::setSaveObjectCallback() "PythonProgram::setSaveObjectCallback()" method to set a
    callback that is called every time a %Qore object is created using the %Python API.

    This callback must take a single object argument as in the following example:

    @code{.py}
hash<string, object> object_cache;
code callback = sub (object obj) {
    # save object in object cache, so it doesn't go out of scope
    object_cache{obj.uniqueHash()} = obj;
}
PythonProgram::setSaveObjectCallback(callback);
    @endcode

    @section pythonreleasenotes python Module Release Notes

    @subsection python_1_1_3 python Module Version 1.1.3
    - @ref Python::PythonProgram::evalExpression() "PythonProgram::evalExpression()" not able to reference
      symbols in the program
      (<a href="https://github.com/qorelanguage/qore/issues/4406">issue 4406</a>)
    - subinterpreter errors using the \c python module from %Python
      (<a href="https://github.com/qorelanguage/qore/issues/4405">issue 4405</a>)

    @subsection python_1_1_2 python Module Version 1.1.2
    - not possible to use the \c qoreloader module from native %Python
      (<a href="https://github.com/qorelanguage/qore/issues/4398">issue 4398</a>)
    - not possible to call imported Java or %Qore static methods when a normal method exists in the same class with
      the same name
      (<a href="https://github.com/qorelanguage/qore/issues/4397">issue 4397</a>)

    @subsection python_1_1_1 python Module Version 1.1.1
    - mark %Qore namespaces imported from %Python modules so that other languages like Java can use consistent paths
      with %Python symbols
      (<a href="https://github.com/qorelanguage/qore/issues/4373">issue 4373</a>)

    @subsection python_1_1 python Module Version 1.1
    - added support for Python 3.10
      (<a href="https://github.com/qorelanguage/qore/issues/4334">issue 4334</a>)

    @subsection python_1_0_7 python Module Version 1.0.7
    - fixed a bug setting the %Qore program context in new %Python threads calling imported %Qore methods or functions
      (<a href="https://github.com/qorelanguage/qore/issues/4330">issue 4330</a>)

    @subsection python_1_0_6 python Module Version 1.0.6
    - fixed a bug handling exception propagation between %Qore and %Python
      (<a href="https://github.com/qorelanguage/qore/issues/4329">issue 4329</a>)

    @subsection python_1_0_5 python Module Version 1.0.5
    - fixed a deadlock in context switching when Python threads switch to %Qore or Java
      (<a href="https://github.com/qorelanguage/qore/issues/4328">issue 4328</a>)
    - fixed a crash when Python threads made Qore or Java calls
      (<a href="https://github.com/qorelanguage/qore/issues/4327">issue 4327</a>)
    - fixed a regression in recursion depth calculations
      (<a href="https://github.com/qorelanguage/qore/issues/4323">issue 4323</a>)

    @subsection python_1_0_4 python Module Version 1.0.4
    - fixed calculating the recursion depth in the initial thread so that more %Python modules can be loaded in single-
      threaded programs without changing the stack size
      (<a href="https://github.com/qorelanguage/qore/issues/4323">issue 4323</a>)
    - fixed errors import valid Python modules
      (<a href="https://github.com/qorelanguage/qore/issues/4322">issue 4322</a>)

    @subsection python_1_0_3 python Module Version 1.0.3
    - do not shut down the %Python library on exit, as it will cause a crash in exit handlers in %Python modules that
      require the library to be in place (ex: h5py module v 3.3.0)
      (<a href="https://github.com/qorelanguage/qore/issues/4290">issue 4290</a>)
    - fixed additional namespace clashes and namespace allocation issues for imported %Python classes in %Qore
      (<a href="https://github.com/qorelanguage/qore/issues/4289">issue 4289</a>)

    @subsection python_1_0_2 python Module Version 1.0.2
    - fixed issues handling the case when the python module is initialized with no Program context
      (<a href="https://github.com/qorelanguage/qore/issues/4153">issue 4153</a>)
    - fixed a bug handling Python constructors in classes derived from Qore or Java classes where the constructor code
      accesses Qore or Java class members or methods before initializing the class
      (<a href="https://github.com/qorelanguage/qore/issues/4141">issue 4141</a>)

    @subsection python_1_0_1 python Module Version 1.0.1
    - fixed a bug where abstract %Qore classes could be instantiated in %Python
      (<a href="https://github.com/qorelanguage/qore/issues/4044">issue 4044</a>)

    @subsection python_1_0 python Module Version 1.0
    - initial public release
*/
